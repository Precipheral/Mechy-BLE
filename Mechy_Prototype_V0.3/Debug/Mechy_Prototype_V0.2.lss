
Mechy_Prototype_V0.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000fb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051fd  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019e2  00000000  00000000  00006461  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075ee  00000000  00000000  00007e43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  0000f434  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00017d43  00000000  00000000  0000fd8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b72  00000000  00000000  00027acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000bc8  00000000  00000000  0002b641  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007438  00000000  00000000  0002c209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c1 c0       	rjmp	.+386    	; 0x184 <__ctors_end>
   2:	00 00       	nop
   4:	da c0       	rjmp	.+436    	; 0x1ba <__bad_interrupt>
   6:	00 00       	nop
   8:	d8 c0       	rjmp	.+432    	; 0x1ba <__bad_interrupt>
   a:	00 00       	nop
   c:	d6 c0       	rjmp	.+428    	; 0x1ba <__bad_interrupt>
   e:	00 00       	nop
  10:	d4 c0       	rjmp	.+424    	; 0x1ba <__bad_interrupt>
  12:	00 00       	nop
  14:	d2 c0       	rjmp	.+420    	; 0x1ba <__bad_interrupt>
  16:	00 00       	nop
  18:	d0 c0       	rjmp	.+416    	; 0x1ba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ce c0       	rjmp	.+412    	; 0x1ba <__bad_interrupt>
  1e:	00 00       	nop
  20:	cc c0       	rjmp	.+408    	; 0x1ba <__bad_interrupt>
  22:	00 00       	nop
  24:	ca c0       	rjmp	.+404    	; 0x1ba <__bad_interrupt>
  26:	00 00       	nop
  28:	36 c5       	rjmp	.+2668   	; 0xa96 <__vector_10>
  2a:	00 00       	nop
  2c:	c6 c0       	rjmp	.+396    	; 0x1ba <__bad_interrupt>
  2e:	00 00       	nop
  30:	c4 c0       	rjmp	.+392    	; 0x1ba <__bad_interrupt>
  32:	00 00       	nop
  34:	c2 c0       	rjmp	.+388    	; 0x1ba <__bad_interrupt>
  36:	00 00       	nop
  38:	c0 c0       	rjmp	.+384    	; 0x1ba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	be c0       	rjmp	.+380    	; 0x1ba <__bad_interrupt>
  3e:	00 00       	nop
  40:	bc c0       	rjmp	.+376    	; 0x1ba <__bad_interrupt>
  42:	00 00       	nop
  44:	ba c0       	rjmp	.+372    	; 0x1ba <__bad_interrupt>
  46:	00 00       	nop
  48:	b8 c0       	rjmp	.+368    	; 0x1ba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b6 c0       	rjmp	.+364    	; 0x1ba <__bad_interrupt>
  4e:	00 00       	nop
  50:	b4 c0       	rjmp	.+360    	; 0x1ba <__bad_interrupt>
  52:	00 00       	nop
  54:	b2 c0       	rjmp	.+356    	; 0x1ba <__bad_interrupt>
  56:	00 00       	nop
  58:	b0 c0       	rjmp	.+352    	; 0x1ba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ae c0       	rjmp	.+348    	; 0x1ba <__bad_interrupt>
  5e:	00 00       	nop
  60:	ac c0       	rjmp	.+344    	; 0x1ba <__bad_interrupt>
  62:	00 00       	nop
  64:	aa c0       	rjmp	.+340    	; 0x1ba <__bad_interrupt>
  66:	00 00       	nop
  68:	a8 c0       	rjmp	.+336    	; 0x1ba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a6 c0       	rjmp	.+332    	; 0x1ba <__bad_interrupt>
  6e:	00 00       	nop
  70:	a4 c0       	rjmp	.+328    	; 0x1ba <__bad_interrupt>
  72:	00 00       	nop
  74:	a2 c0       	rjmp	.+324    	; 0x1ba <__bad_interrupt>
  76:	00 00       	nop
  78:	a0 c0       	rjmp	.+320    	; 0x1ba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9e c0       	rjmp	.+316    	; 0x1ba <__bad_interrupt>
  7e:	00 00       	nop
  80:	9c c0       	rjmp	.+312    	; 0x1ba <__bad_interrupt>
  82:	00 00       	nop
  84:	9a c0       	rjmp	.+308    	; 0x1ba <__bad_interrupt>
  86:	00 00       	nop
  88:	98 c0       	rjmp	.+304    	; 0x1ba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	96 c0       	rjmp	.+300    	; 0x1ba <__bad_interrupt>
  8e:	00 00       	nop
  90:	94 c0       	rjmp	.+296    	; 0x1ba <__bad_interrupt>
  92:	00 00       	nop
  94:	92 c0       	rjmp	.+292    	; 0x1ba <__bad_interrupt>
  96:	00 00       	nop
  98:	90 c0       	rjmp	.+288    	; 0x1ba <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8e c0       	rjmp	.+284    	; 0x1ba <__bad_interrupt>
  9e:	00 00       	nop
  a0:	8c c0       	rjmp	.+280    	; 0x1ba <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8a c0       	rjmp	.+276    	; 0x1ba <__bad_interrupt>
  a6:	00 00       	nop
  a8:	88 c0       	rjmp	.+272    	; 0x1ba <__bad_interrupt>
	...

000000ac <ProductString>:
  ac:	2a 03 4d 00 65 00 63 00 68 00 79 00 20 00 50 00     *.M.e.c.h.y. .P.
  bc:	72 00 6f 00 74 00 6f 00 74 00 79 00 70 00 65 00     r.o.t.o.t.y.p.e.
  cc:	20 00 56 00 30 00 2e 00 32 00 00 00                  .V.0...2...

000000d8 <ManufacturerString>:
  d8:	18 03 50 00 72 00 65 00 63 00 69 00 70 00 68 00     ..P.r.e.c.i.p.h.
  e8:	65 00 72 00 61 00 6c 00 00 00                       e.r.a.l...

000000f2 <LanguageString>:
  f2:	04 03 09 04                                         ....

000000f6 <ConfigurationDescriptor>:
  f6:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
 106:	00 00 09 21 11 01 00 01 22 59 00 07 05 81 03 10     ...!...."Y......
 116:	00 05                                               ..

00000118 <DeviceDescriptor>:
 118:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
 128:	00 01                                               ..

0000012a <JoystickReport>:
 12a:	05 01 09 05 a1 01 09 01 a1 00 0a 30 00 0a 31 00     ...........0..1.
 13a:	0a 33 00 0a 34 00 16 00 00 26 ff 03 95 04 75 10     .3..4....&....u.
 14a:	81 02 c0 05 01 a1 01 09 39 15 00 25 07 35 00 45     ........9..%.5.E
 15a:	3b 65 14 55 00 95 01 75 04 81 02 75 01 95 04 81     ;e.U...u...u....
 16a:	01 c0 05 09 19 01 29 0a 15 00 25 01 75 01 95 0a     ......)...%.u...
 17a:	81 02 75 01 95 06 81 01 c0 00                       ..u.......

00000184 <__ctors_end>:
 184:	11 24       	eor	r1, r1
 186:	1f be       	out	0x3f, r1	; 63
 188:	cf ef       	ldi	r28, 0xFF	; 255
 18a:	da e0       	ldi	r29, 0x0A	; 10
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	cd bf       	out	0x3d, r28	; 61

00000190 <__do_copy_data>:
 190:	11 e0       	ldi	r17, 0x01	; 1
 192:	a0 e0       	ldi	r26, 0x00	; 0
 194:	b1 e0       	ldi	r27, 0x01	; 1
 196:	e0 e4       	ldi	r30, 0x40	; 64
 198:	ff e0       	ldi	r31, 0x0F	; 15
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <__do_copy_data+0x10>
 19c:	05 90       	lpm	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	a0 30       	cpi	r26, 0x00	; 0
 1a2:	b1 07       	cpc	r27, r17
 1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0xc>

000001a6 <__do_clear_bss>:
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	a0 e0       	ldi	r26, 0x00	; 0
 1aa:	b1 e0       	ldi	r27, 0x01	; 1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <.do_clear_bss_start>

000001ae <.do_clear_bss_loop>:
 1ae:	1d 92       	st	X+, r1

000001b0 <.do_clear_bss_start>:
 1b0:	af 30       	cpi	r26, 0x0F	; 15
 1b2:	b2 07       	cpc	r27, r18
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <.do_clear_bss_loop>
 1b6:	d8 d1       	rcall	.+944    	; 0x568 <main>
 1b8:	c1 c6       	rjmp	.+3458   	; 0xf3c <_exit>

000001ba <__bad_interrupt>:
 1ba:	22 cf       	rjmp	.-444    	; 0x0 <__vectors>

000001bc <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 1bc:	29 2f       	mov	r18, r25
 1be:	33 27       	eor	r19, r19
 1c0:	23 30       	cpi	r18, 0x03	; 3
 1c2:	31 05       	cpc	r19, r1
 1c4:	c9 f0       	breq	.+50     	; 0x1f8 <CALLBACK_USB_GetDescriptor+0x3c>
 1c6:	38 f4       	brcc	.+14     	; 0x1d6 <CALLBACK_USB_GetDescriptor+0x1a>
 1c8:	21 30       	cpi	r18, 0x01	; 1
 1ca:	31 05       	cpc	r19, r1
 1cc:	59 f0       	breq	.+22     	; 0x1e4 <CALLBACK_USB_GetDescriptor+0x28>
 1ce:	22 30       	cpi	r18, 0x02	; 2
 1d0:	31 05       	cpc	r19, r1
 1d2:	69 f0       	breq	.+26     	; 0x1ee <CALLBACK_USB_GetDescriptor+0x32>
 1d4:	35 c0       	rjmp	.+106    	; 0x240 <CALLBACK_USB_GetDescriptor+0x84>
 1d6:	21 32       	cpi	r18, 0x21	; 33
 1d8:	31 05       	cpc	r19, r1
 1da:	41 f1       	breq	.+80     	; 0x22c <CALLBACK_USB_GetDescriptor+0x70>
 1dc:	22 32       	cpi	r18, 0x22	; 34
 1de:	31 05       	cpc	r19, r1
 1e0:	51 f1       	breq	.+84     	; 0x236 <CALLBACK_USB_GetDescriptor+0x7a>
 1e2:	2e c0       	rjmp	.+92     	; 0x240 <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 1e4:	82 e1       	ldi	r24, 0x12	; 18
 1e6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 1e8:	28 e1       	ldi	r18, 0x18	; 24
 1ea:	31 e0       	ldi	r19, 0x01	; 1
 1ec:	32 c0       	rjmp	.+100    	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 1ee:	82 e2       	ldi	r24, 0x22	; 34
 1f0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 1f2:	26 ef       	ldi	r18, 0xF6	; 246
 1f4:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 1f6:	2d c0       	rjmp	.+90     	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
 1f8:	99 27       	eor	r25, r25
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	91 05       	cpc	r25, r1
 1fe:	51 f0       	breq	.+20     	; 0x214 <CALLBACK_USB_GetDescriptor+0x58>
 200:	18 f0       	brcs	.+6      	; 0x208 <CALLBACK_USB_GetDescriptor+0x4c>
 202:	02 97       	sbiw	r24, 0x02	; 2
 204:	69 f0       	breq	.+26     	; 0x220 <CALLBACK_USB_GetDescriptor+0x64>
 206:	21 c0       	rjmp	.+66     	; 0x24a <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 208:	e2 ef       	ldi	r30, 0xF2	; 242
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	84 91       	lpm	r24, Z
 20e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
 210:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
 212:	1f c0       	rjmp	.+62     	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 214:	e8 ed       	ldi	r30, 0xD8	; 216
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	84 91       	lpm	r24, Z
 21a:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
 21c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
 21e:	19 c0       	rjmp	.+50     	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 220:	ec ea       	ldi	r30, 0xAC	; 172
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	84 91       	lpm	r24, Z
 226:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 228:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 22a:	13 c0       	rjmp	.+38     	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 22c:	89 e0       	ldi	r24, 0x09	; 9
 22e:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 230:	28 e0       	ldi	r18, 0x08	; 8
 232:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 234:	0e c0       	rjmp	.+28     	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 236:	89 e5       	ldi	r24, 0x59	; 89
 238:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 23a:	2a e2       	ldi	r18, 0x2A	; 42
 23c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(JoystickReport);
			break;
 23e:	09 c0       	rjmp	.+18     	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	04 c0       	rjmp	.+8      	; 0x252 <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 252:	fa 01       	movw	r30, r20
 254:	31 83       	std	Z+1, r19	; 0x01
 256:	20 83       	st	Z, r18
	return Size;
}
 258:	08 95       	ret

0000025a <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 25a:	84 b7       	in	r24, 0x34	; 52
 25c:	87 7f       	andi	r24, 0xF7	; 247
 25e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	a8 95       	wdr
 266:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 26a:	88 61       	ori	r24, 0x18	; 24
 26c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 270:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 274:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 282:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 286:	0f be       	out	0x3f, r0	; 63
			#define JOY_RX			ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL6 )
			#define JOY_RY			ADC_GetChannelReading(ADC_REFERENCE_AVCC | ADC_RIGHT_ADJUSTED | ADC_CHANNEL5 )
			
			static inline void       Joystick_Init(void) 
			{
				DDRF &= ~JOY_MASK;
 288:	84 98       	cbi	0x10, 4	; 16
				PORTF |=  JOY_MASK;
 28a:	8c 9a       	sbi	0x11, 4	; 17
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
 28c:	86 e8       	ldi	r24, 0x86	; 134
 28e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		#include "../../Common/Common.h"

		#if (BOARD == BOARD_NONE)
			static inline void       LEDs_Init(void) 
			{
				DDRE  |=  LEDS_ALL_LEDS;
 292:	8d b1       	in	r24, 0x0d	; 13
 294:	80 6f       	ori	r24, 0xF0	; 240
 296:	8d b9       	out	0x0d, r24	; 13
				PORTE &= ~LEDS_ALL_LEDS;				
 298:	8e b1       	in	r24, 0x0e	; 14
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	8e b9       	out	0x0e, r24	; 14
			//#define BUTTONS_UP			(1 << 0)
			//#define BUTTONS_DOWN		(1 << 1)
						
			static inline void       Buttons_Init(void) 
			{
				DDRD  &= ~BUTTONS_MASK;
 29e:	8a b1       	in	r24, 0x0a	; 10
 2a0:	1a b8       	out	0x0a, r1	; 10
				PORTD |=  BUTTONS_MASK;
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	8f ef       	ldi	r24, 0xFF	; 255

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
 2a6:	8b b9       	out	0x0b, r24	; 11
 2a8:	d8 c3       	rjmp	.+1968   	; 0xa5a <USB_Init>
 2aa:	08 95       	ret

000002ac <EVENT_USB_Device_Connect>:
			{
				PORTE &= ~LedMask;				
			}
			static inline void       LEDs_SetAllLEDs(const uint_reg_t LEDMask) 
			{
				PORTE = ((PORTE & ~LEDS_ALL_LEDS) | LedMask);				
 2ac:	8e b1       	in	r24, 0x0e	; 14
 2ae:	80 6f       	ori	r24, 0xF0	; 240
 2b0:	8e b9       	out	0x0e, r24	; 14
 2b2:	08 95       	ret

000002b4 <EVENT_USB_Device_Disconnect>:
 2b4:	8e b1       	in	r24, 0x0e	; 14
 2b6:	80 6f       	ori	r24, 0xF0	; 240
 2b8:	8e b9       	out	0x0e, r24	; 14
 2ba:	08 95       	ret

000002bc <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 2bc:	42 e1       	ldi	r20, 0x12	; 18
 2be:	61 ec       	ldi	r22, 0xC1	; 193
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	c0 d2       	rcall	.+1408   	; 0x844 <Endpoint_ConfigureEndpoint_Prv>
 2c4:	8e b1       	in	r24, 0x0e	; 14
 2c6:	80 6f       	ori	r24, 0xF0	; 240
 2c8:	8e b9       	out	0x0e, r24	; 14
 2ca:	08 95       	ret

000002cc <GetNextReport>:
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 *
 *  \return Boolean \c true if the new report differs from the last report, \c false otherwise
 */
bool GetNextReport(USB_JoystickReport_Data_t* const ReportData)
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	dc 01       	movw	r26, r24
				PORTD |=  BUTTONS_BUTTON4;
				*/
			}
			static inline uint_reg_t Buttons_GetStatus(void) 
			{
				return ((PIND & BUTTONS_MASK) ^ BUTTONS_MASK);				
 2d2:	29 b1       	in	r18, 0x09	; 9
 2d4:	20 95       	com	r18
	uint8_t        ButtonStatus_LCL = Buttons_GetStatus();
	bool           InputChanged     = false;
	int8_t			HatMask			= 0;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_JoystickReport_Data_t));
 2d6:	8b e0       	ldi	r24, 0x0B	; 11
 2d8:	fd 01       	movw	r30, r26
 2da:	11 92       	st	Z+, r1
 2dc:	8a 95       	dec	r24
 2de:	e9 f7       	brne	.-6      	; 0x2da <GetNextReport+0xe>
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
 2e6:	eb e7       	ldi	r30, 0x7B	; 123
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8f 7d       	andi	r24, 0xDF	; 223
 2ee:	80 83       	st	Z, r24
				#endif

				ADCSRA |= (1 << ADSC);
 2f0:	ea e7       	ldi	r30, 0x7A	; 122
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	80 83       	st	Z, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
 2fa:	90 81       	ld	r25, Z
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
 2fc:	94 ff       	sbrs	r25, 4
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <GetNextReport+0x2e>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
 300:	ea e7       	ldi	r30, 0x7A	; 122
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 61       	ori	r24, 0x10	; 16
 308:	80 83       	st	Z, r24
				return ADC;
 30a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 30e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	//Send Left Stick X-Axis ADC Reading to Y in Report Data, axis inverted with 9-bit for signed int 
	ReportData->X = (JOY_X ^ 0x3FF);
 312:	80 95       	com	r24
 314:	33 e0       	ldi	r19, 0x03	; 3
 316:	93 27       	eor	r25, r19
 318:	11 96       	adiw	r26, 0x01	; 1
 31a:	9c 93       	st	X, r25
 31c:	8e 93       	st	-X, r24
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 31e:	80 e4       	ldi	r24, 0x40	; 64
 320:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
 324:	cb e7       	ldi	r28, 0x7B	; 123
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	88 81       	ld	r24, Y
 32a:	8f 7d       	andi	r24, 0xDF	; 223
 32c:	88 83       	st	Y, r24
				#endif

				ADCSRA |= (1 << ADSC);
 32e:	80 81       	ld	r24, Z
 330:	80 64       	ori	r24, 0x40	; 64
 332:	80 83       	st	Z, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
 334:	90 81       	ld	r25, Z
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
 336:	94 ff       	sbrs	r25, 4
 338:	fd cf       	rjmp	.-6      	; 0x334 <GetNextReport+0x68>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
 33a:	ea e7       	ldi	r30, 0x7A	; 122
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 61       	ori	r24, 0x10	; 16
 342:	80 83       	st	Z, r24
				return ADC;
 344:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 348:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	//Send Left Stick Y-Axis ADC Reading to x in Report Data
	ReportData->Y = JOY_Y;
 34c:	13 96       	adiw	r26, 0x03	; 3
 34e:	9c 93       	st	X, r25
 350:	8e 93       	st	-X, r24
 352:	12 97       	sbiw	r26, 0x02	; 2
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 354:	86 e4       	ldi	r24, 0x46	; 70
 356:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
 35a:	cb e7       	ldi	r28, 0x7B	; 123
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	88 81       	ld	r24, Y
 360:	8f 7d       	andi	r24, 0xDF	; 223
 362:	88 83       	st	Y, r24
				#endif

				ADCSRA |= (1 << ADSC);
 364:	80 81       	ld	r24, Z
 366:	80 64       	ori	r24, 0x40	; 64
 368:	80 83       	st	Z, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
 36a:	90 81       	ld	r25, Z
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
 36c:	94 ff       	sbrs	r25, 4
 36e:	fd cf       	rjmp	.-6      	; 0x36a <GetNextReport+0x9e>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
 370:	ea e7       	ldi	r30, 0x7A	; 122
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	80 61       	ori	r24, 0x10	; 16
 378:	80 83       	st	Z, r24
				return ADC;
 37a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 37e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
	//Send Right Stick X-Axis ADC Reading to RX in Report Data, axis inverted with 9-bit for signed int  
	ReportData->RX = (JOY_RX ^ 0x3FF);
 382:	80 95       	com	r24
 384:	33 e0       	ldi	r19, 0x03	; 3
 386:	93 27       	eor	r25, r19
 388:	15 96       	adiw	r26, 0x05	; 5
 38a:	9c 93       	st	X, r25
 38c:	8e 93       	st	-X, r24
 38e:	14 97       	sbiw	r26, 0x04	; 4
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
 390:	85 e4       	ldi	r24, 0x45	; 69
 392:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
				  ADCSRB |=  (1 << MUX5);
				else
				  ADCSRB &= ~(1 << MUX5);
 396:	cb e7       	ldi	r28, 0x7B	; 123
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	88 81       	ld	r24, Y
 39c:	8f 7d       	andi	r24, 0xDF	; 223
 39e:	88 83       	st	Y, r24
				#endif

				ADCSRA |= (1 << ADSC);
 3a0:	80 81       	ld	r24, Z
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	80 83       	st	Z, r24
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
 3a6:	90 81       	ld	r25, Z
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask) ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t ADC_GetChannelReading(const uint16_t MUXMask)
			{
				ADC_StartReading(MUXMask);

				while (!(ADC_IsReadingComplete()));
 3a8:	94 ff       	sbrs	r25, 4
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <GetNextReport+0xda>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
 3ac:	ea e7       	ldi	r30, 0x7A	; 122
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 61       	ori	r24, 0x10	; 16
 3b4:	80 83       	st	Z, r24
				return ADC;
 3b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	//Send Right Stick Y-Axis ADC Reading to RY in Report Data
	ReportData->RY = JOY_RY;
 3be:	17 96       	adiw	r26, 0x07	; 7
 3c0:	9c 93       	st	X, r25
 3c2:	8e 93       	st	-X, r24
 3c4:	16 97       	sbiw	r26, 0x06	; 6
		

	if (JoyStatus_LCL & JOY_PRESS)
		ReportData->Button |= (1 << 7);

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 3c6:	25 ff       	sbrs	r18, 5
 3c8:	07 c0       	rjmp	.+14     	; 0x3d8 <GetNextReport+0x10c>
		ReportData->Button |= (1 << 0); 
 3ca:	19 96       	adiw	r26, 0x09	; 9
 3cc:	8c 91       	ld	r24, X
 3ce:	19 97       	sbiw	r26, 0x09	; 9
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	19 96       	adiw	r26, 0x09	; 9
 3d4:	8c 93       	st	X, r24
 3d6:	19 97       	sbiw	r26, 0x09	; 9
	
	if (ButtonStatus_LCL & BUTTONS_BUTTON2)
 3d8:	22 23       	and	r18, r18
 3da:	3c f4       	brge	.+14     	; 0x3ea <GetNextReport+0x11e>
		ReportData->Button |= (1 << 1); 
 3dc:	19 96       	adiw	r26, 0x09	; 9
 3de:	8c 91       	ld	r24, X
 3e0:	19 97       	sbiw	r26, 0x09	; 9
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	19 96       	adiw	r26, 0x09	; 9
 3e6:	8c 93       	st	X, r24
 3e8:	19 97       	sbiw	r26, 0x09	; 9
	
	if (ButtonStatus_LCL & BUTTONS_BUTTON3)
 3ea:	24 ff       	sbrs	r18, 4
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <GetNextReport+0x130>
		ReportData->Button |= (1 << 2); 
 3ee:	19 96       	adiw	r26, 0x09	; 9
 3f0:	8c 91       	ld	r24, X
 3f2:	19 97       	sbiw	r26, 0x09	; 9
 3f4:	84 60       	ori	r24, 0x04	; 4
 3f6:	19 96       	adiw	r26, 0x09	; 9
 3f8:	8c 93       	st	X, r24
 3fa:	19 97       	sbiw	r26, 0x09	; 9

	if (ButtonStatus_LCL & BUTTONS_BUTTON4)
 3fc:	26 ff       	sbrs	r18, 6
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		ReportData->Button |= (1 << 3); 
 400:	19 96       	adiw	r26, 0x09	; 9
 402:	8c 91       	ld	r24, X
 404:	19 97       	sbiw	r26, 0x09	; 9
 406:	88 60       	ori	r24, 0x08	; 8
 408:	19 96       	adiw	r26, 0x09	; 9
 40a:	8c 93       	st	X, r24
 40c:	19 97       	sbiw	r26, 0x09	; 9
	static uint8_t PrevJoyStatus    = 0;
	static uint8_t PrevButtonStatus = 0;
	uint8_t        JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t        ButtonStatus_LCL = Buttons_GetStatus();
	bool           InputChanged     = false;
	int8_t			HatMask			= 0;
 40e:	82 2f       	mov	r24, r18
 410:	81 70       	andi	r24, 0x01	; 1
	
	if (ButtonStatus_LCL & BUTTONS_BUTTON5)
		HatMask |= (1 << 0);
		
		
	if (ButtonStatus_LCL & BUTTONS_BUTTON6)
 412:	21 fd       	sbrc	r18, 1
		HatMask |= (1 << 1);
 414:	82 60       	ori	r24, 0x02	; 2
		
		
	if (ButtonStatus_LCL & BUTTONS_BUTTON7)
 416:	22 fd       	sbrc	r18, 2
		HatMask |= (1 << 2);
 418:	84 60       	ori	r24, 0x04	; 4
		

	if (ButtonStatus_LCL & BUTTONS_BUTTON8)
 41a:	23 fd       	sbrc	r18, 3
		HatMask |= (1 << 3);
 41c:	88 60       	ori	r24, 0x08	; 8
		
	switch(HatMask)
 41e:	85 30       	cpi	r24, 0x05	; 5
 420:	71 f1       	breq	.+92     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 422:	3c f4       	brge	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 424:	82 30       	cpi	r24, 0x02	; 2
 426:	99 f0       	breq	.+38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	a9 f0       	breq	.+42     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	59 f5       	brne	.+86     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 430:	0b c0       	rjmp	.+22     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 432:	88 30       	cpi	r24, 0x08	; 8
 434:	a1 f0       	breq	.+40     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 436:	1c f4       	brge	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 438:	86 30       	cpi	r24, 0x06	; 6
 43a:	e9 f0       	breq	.+58     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 43c:	24 c0       	rjmp	.+72     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 43e:	89 30       	cpi	r24, 0x09	; 9
 440:	91 f0       	breq	.+36     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 442:	8a 30       	cpi	r24, 0x0A	; 10
 444:	a1 f0       	breq	.+40     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 446:	1f c0       	rjmp	.+62     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	{
		case 0x01:				 //Up
			ReportData->Hat = 0;
 448:	18 96       	adiw	r26, 0x08	; 8
 44a:	1c 92       	st	X, r1
			break;
 44c:	1f c0       	rjmp	.+62     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		
		case 0x02:					 //Down
			ReportData->Hat = 4;
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	18 96       	adiw	r26, 0x08	; 8
 452:	8c 93       	st	X, r24
			break;		
 454:	1b c0       	rjmp	.+54     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		
		case 0x04:					//Left
			ReportData->Hat = 6;
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	18 96       	adiw	r26, 0x08	; 8
 45a:	8c 93       	st	X, r24
			break;	
 45c:	17 c0       	rjmp	.+46     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				
		case 0x08:					//Right
			ReportData->Hat = 2;
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	18 96       	adiw	r26, 0x08	; 8
 462:	8c 93       	st	X, r24
			break;	
 464:	13 c0       	rjmp	.+38     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				
		case 0x09:					//Up - Right
			ReportData->Hat = 1;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	18 96       	adiw	r26, 0x08	; 8
 46a:	8c 93       	st	X, r24
			break;	
 46c:	0f c0       	rjmp	.+30     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				
		case 0x0A:					//Down - Right
			ReportData->Hat = 3;
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	18 96       	adiw	r26, 0x08	; 8
 472:	8c 93       	st	X, r24
			break;		
 474:	0b c0       	rjmp	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			
		case 0x06:					//Down -Left
			ReportData->Hat = 5;
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	18 96       	adiw	r26, 0x08	; 8
 47a:	8c 93       	st	X, r24
			break;	
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				
		case 0x05:					//Up - Left
			ReportData->Hat = 7;
 47e:	87 e0       	ldi	r24, 0x07	; 7
 480:	18 96       	adiw	r26, 0x08	; 8
 482:	8c 93       	st	X, r24
			break;
 484:	03 c0       	rjmp	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					
		default :
			ReportData->Hat = -1;
 486:	8f ef       	ldi	r24, 0xFF	; 255
 488:	18 96       	adiw	r26, 0x08	; 8
 48a:	8c 93       	st	X, r24
	}

	/* Check if the new report is different to the previous report */
	InputChanged = (uint8_t)(PrevJoyStatus ^ JoyStatus_LCL) | (uint8_t)(PrevButtonStatus ^ ButtonStatus_LCL);
 48c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_end>
 490:	92 27       	eor	r25, r18
 492:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PrevJoyStatus.4375>
 496:	98 2b       	or	r25, r24
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	09 f4       	brne	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	80 e0       	ldi	r24, 0x00	; 0

	/* Save the current joystick status for later comparison */
	PrevJoyStatus    = JoyStatus_LCL;
 49e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <PrevJoyStatus.4375>
	PrevButtonStatus = ButtonStatus_LCL;
 4a2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_end>

	/* Return whether the new report is different to the previous report or not */
	return InputChanged;
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
 4b8:	2b 97       	sbiw	r28, 0x0b	; 11
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	f8 94       	cli
 4be:	de bf       	out	0x3e, r29	; 62
 4c0:	0f be       	out	0x3f, r0	; 63
 4c2:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 4c4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <USB_ControlRequest+0x1>
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	b1 f4       	brne	.+44     	; 0x4f8 <EVENT_USB_Device_ControlRequest+0x4c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 4cc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest>
 4d0:	81 3a       	cpi	r24, 0xA1	; 161
 4d2:	91 f4       	brne	.+36     	; 0x4f8 <EVENT_USB_Device_ControlRequest+0x4c>
			{
				USB_JoystickReport_Data_t JoystickReportData;

				/* Create the next HID report to send to the host */
				GetNextReport(&JoystickReportData);
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	f9 de       	rcall	.-526    	; 0x2cc <GetNextReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 4da:	08 ee       	ldi	r16, 0xE8	; 232
 4dc:	10 e0       	ldi	r17, 0x00	; 0
 4de:	f8 01       	movw	r30, r16
 4e0:	80 81       	ld	r24, Z
 4e2:	87 7f       	andi	r24, 0xF7	; 247
 4e4:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&JoystickReportData, sizeof(JoystickReportData));
 4e6:	6b e0       	ldi	r22, 0x0B	; 11
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	ce 01       	movw	r24, r28
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	a1 d0       	rcall	.+322    	; 0x632 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4f0:	f8 01       	movw	r30, r16
 4f2:	80 81       	ld	r24, Z
 4f4:	8b 77       	andi	r24, 0x7B	; 123
 4f6:	80 83       	st	Z, r24
				Endpoint_ClearOUT();
			}

			break;
	}
}
 4f8:	2b 96       	adiw	r28, 0x0b	; 11
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	1f 91       	pop	r17
 50a:	0f 91       	pop	r16
 50c:	08 95       	ret

0000050e <HID_Task>:
	return InputChanged;
}

/** Function to manage HID report generation and transmission to the host. */
void HID_Task(void)
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	2b 97       	sbiw	r28, 0x0b	; 11
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 522:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 526:	84 30       	cpi	r24, 0x04	; 4
 528:	b1 f4       	brne	.+44     	; 0x556 <HID_Task+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 530:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPADDR);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady())
 534:	80 ff       	sbrs	r24, 0
 536:	0f c0       	rjmp	.+30     	; 0x556 <HID_Task+0x48>
	{
		USB_JoystickReport_Data_t JoystickReportData;

		/* Create the next HID report to send to the host */
		GetNextReport(&JoystickReportData);
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	c7 de       	rcall	.-626    	; 0x2cc <GetNextReport>

		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&JoystickReportData, sizeof(JoystickReportData), NULL);
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	6b e0       	ldi	r22, 0x0B	; 11
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	ce 01       	movw	r24, r28
 548:	01 96       	adiw	r24, 0x01	; 1
 54a:	16 d0       	rcall	.+44     	; 0x578 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 54c:	e8 ee       	ldi	r30, 0xE8	; 232
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	8e 77       	andi	r24, 0x7E	; 126
 554:	80 83       	st	Z, r24
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&JoystickReportData, 0, sizeof(JoystickReportData));
	}
}
 556:	2b 96       	adiw	r28, 0x0b	; 11
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <main>:

/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
 568:	78 de       	rcall	.-784    	; 0x25a <SetupHardware>
 56a:	8e b1       	in	r24, 0x0e	; 14
 56c:	80 6f       	ori	r24, 0xF0	; 240
 56e:	8e b9       	out	0x0e, r24	; 14
 570:	78 94       	sei
 572:	cd df       	rcall	.-102    	; 0x50e <HID_Task>
 574:	c9 d4       	rcall	.+2450   	; 0xf08 <USB_USBTask>
 576:	fd cf       	rjmp	.-6      	; 0x572 <main+0xa>

00000578 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 578:	8f 92       	push	r8
 57a:	9f 92       	push	r9
 57c:	af 92       	push	r10
 57e:	bf 92       	push	r11
 580:	cf 92       	push	r12
 582:	df 92       	push	r13
 584:	ef 92       	push	r14
 586:	ff 92       	push	r15
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	8c 01       	movw	r16, r24
 592:	eb 01       	movw	r28, r22
 594:	5a 01       	movw	r10, r20
 596:	e0 d1       	rcall	.+960    	; 0x958 <Endpoint_WaitUntilReady>
 598:	81 11       	cpse	r24, r1
 59a:	3e c0       	rjmp	.+124    	; 0x618 <Endpoint_Write_Stream_LE+0xa0>
 59c:	a1 14       	cp	r10, r1
 59e:	b1 04       	cpc	r11, r1
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <Endpoint_Write_Stream_LE+0x38>
 5a2:	f5 01       	movw	r30, r10
 5a4:	80 81       	ld	r24, Z
 5a6:	91 81       	ldd	r25, Z+1	; 0x01
 5a8:	c8 1b       	sub	r28, r24
 5aa:	d9 0b       	sbc	r29, r25
 5ac:	08 0f       	add	r16, r24
 5ae:	19 1f       	adc	r17, r25
 5b0:	20 97       	sbiw	r28, 0x00	; 0
 5b2:	89 f1       	breq	.+98     	; 0x616 <Endpoint_Write_Stream_LE+0x9e>
 5b4:	e1 2c       	mov	r14, r1
 5b6:	f1 2c       	mov	r15, r1
 5b8:	0f 2e       	mov	r0, r31
 5ba:	f8 ee       	ldi	r31, 0xE8	; 232
 5bc:	8f 2e       	mov	r8, r31
 5be:	91 2c       	mov	r9, r1
 5c0:	f0 2d       	mov	r31, r0
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f1 ef       	ldi	r31, 0xF1	; 241
 5c6:	cf 2e       	mov	r12, r31
 5c8:	d1 2c       	mov	r13, r1
 5ca:	f0 2d       	mov	r31, r0
 5cc:	f4 01       	movw	r30, r8
 5ce:	80 81       	ld	r24, Z
 5d0:	85 fd       	sbrc	r24, 5
 5d2:	14 c0       	rjmp	.+40     	; 0x5fc <Endpoint_Write_Stream_LE+0x84>
 5d4:	80 81       	ld	r24, Z
 5d6:	8e 77       	andi	r24, 0x7E	; 126
 5d8:	80 83       	st	Z, r24
 5da:	96 d4       	rcall	.+2348   	; 0xf08 <USB_USBTask>
 5dc:	a1 14       	cp	r10, r1
 5de:	b1 04       	cpc	r11, r1
 5e0:	49 f0       	breq	.+18     	; 0x5f4 <Endpoint_Write_Stream_LE+0x7c>
 5e2:	f5 01       	movw	r30, r10
 5e4:	80 81       	ld	r24, Z
 5e6:	91 81       	ldd	r25, Z+1	; 0x01
 5e8:	e8 0e       	add	r14, r24
 5ea:	f9 1e       	adc	r15, r25
 5ec:	f1 82       	std	Z+1, r15	; 0x01
 5ee:	e0 82       	st	Z, r14
 5f0:	85 e0       	ldi	r24, 0x05	; 5
 5f2:	12 c0       	rjmp	.+36     	; 0x618 <Endpoint_Write_Stream_LE+0xa0>
 5f4:	b1 d1       	rcall	.+866    	; 0x958 <Endpoint_WaitUntilReady>
 5f6:	88 23       	and	r24, r24
 5f8:	51 f0       	breq	.+20     	; 0x60e <Endpoint_Write_Stream_LE+0x96>
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <Endpoint_Write_Stream_LE+0xa0>
 5fc:	f8 01       	movw	r30, r16
 5fe:	81 91       	ld	r24, Z+
 600:	8f 01       	movw	r16, r30
 602:	f6 01       	movw	r30, r12
 604:	80 83       	st	Z, r24
 606:	21 97       	sbiw	r28, 0x01	; 1
 608:	ff ef       	ldi	r31, 0xFF	; 255
 60a:	ef 1a       	sub	r14, r31
 60c:	ff 0a       	sbc	r15, r31
 60e:	20 97       	sbiw	r28, 0x00	; 0
 610:	e9 f6       	brne	.-70     	; 0x5cc <Endpoint_Write_Stream_LE+0x54>
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	01 c0       	rjmp	.+2      	; 0x618 <Endpoint_Write_Stream_LE+0xa0>
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	ff 90       	pop	r15
 622:	ef 90       	pop	r14
 624:	df 90       	pop	r13
 626:	cf 90       	pop	r12
 628:	bf 90       	pop	r11
 62a:	af 90       	pop	r10
 62c:	9f 90       	pop	r9
 62e:	8f 90       	pop	r8
 630:	08 95       	ret

00000632 <Endpoint_Write_Control_Stream_LE>:
 632:	cf 92       	push	r12
 634:	df 92       	push	r13
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <USB_ControlRequest+0x6>
 644:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <USB_ControlRequest+0x7>
 648:	26 17       	cp	r18, r22
 64a:	37 07       	cpc	r19, r23
 64c:	58 f0       	brcs	.+22     	; 0x664 <Endpoint_Write_Control_Stream_LE+0x32>
 64e:	61 15       	cp	r22, r1
 650:	71 05       	cpc	r23, r1
 652:	39 f4       	brne	.+14     	; 0x662 <Endpoint_Write_Control_Stream_LE+0x30>
 654:	e8 ee       	ldi	r30, 0xE8	; 232
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	20 81       	ld	r18, Z
 65a:	2e 77       	andi	r18, 0x7E	; 126
 65c:	20 83       	st	Z, r18
 65e:	9b 01       	movw	r18, r22
 660:	01 c0       	rjmp	.+2      	; 0x664 <Endpoint_Write_Control_Stream_LE+0x32>
 662:	9b 01       	movw	r18, r22
 664:	a8 2f       	mov	r26, r24
 666:	b9 2f       	mov	r27, r25
 668:	10 e0       	ldi	r17, 0x00	; 0
 66a:	e8 ee       	ldi	r30, 0xE8	; 232
 66c:	f0 e0       	ldi	r31, 0x00	; 0
 66e:	63 ef       	ldi	r22, 0xF3	; 243
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	42 ef       	ldi	r20, 0xF2	; 242
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	0f 2e       	mov	r0, r31
 678:	f1 ef       	ldi	r31, 0xF1	; 241
 67a:	cf 2e       	mov	r12, r31
 67c:	d1 2c       	mov	r13, r1
 67e:	f0 2d       	mov	r31, r0
 680:	01 e0       	ldi	r16, 0x01	; 1
 682:	f1 2c       	mov	r15, r1
 684:	30 c0       	rjmp	.+96     	; 0x6e6 <Endpoint_Write_Control_Stream_LE+0xb4>
 686:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 68a:	88 23       	and	r24, r24
 68c:	09 f4       	brne	.+2      	; 0x690 <Endpoint_Write_Control_Stream_LE+0x5e>
 68e:	42 c0       	rjmp	.+132    	; 0x714 <Endpoint_Write_Control_Stream_LE+0xe2>
 690:	85 30       	cpi	r24, 0x05	; 5
 692:	09 f4       	brne	.+2      	; 0x696 <Endpoint_Write_Control_Stream_LE+0x64>
 694:	41 c0       	rjmp	.+130    	; 0x718 <Endpoint_Write_Control_Stream_LE+0xe6>
 696:	80 81       	ld	r24, Z
 698:	83 fd       	sbrc	r24, 3
 69a:	40 c0       	rjmp	.+128    	; 0x71c <Endpoint_Write_Control_Stream_LE+0xea>
 69c:	80 81       	ld	r24, Z
 69e:	82 fd       	sbrc	r24, 2
 6a0:	32 c0       	rjmp	.+100    	; 0x706 <Endpoint_Write_Control_Stream_LE+0xd4>
 6a2:	80 81       	ld	r24, Z
 6a4:	80 ff       	sbrs	r24, 0
 6a6:	1f c0       	rjmp	.+62     	; 0x6e6 <Endpoint_Write_Control_Stream_LE+0xb4>
 6a8:	eb 01       	movw	r28, r22
 6aa:	18 81       	ld	r17, Y
 6ac:	ea 01       	movw	r28, r20
 6ae:	88 81       	ld	r24, Y
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	91 2b       	or	r25, r17
 6b4:	21 15       	cp	r18, r1
 6b6:	31 05       	cpc	r19, r1
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <Endpoint_Write_Control_Stream_LE+0xa6>
 6ba:	88 30       	cpi	r24, 0x08	; 8
 6bc:	91 05       	cpc	r25, r1
 6be:	60 f4       	brcc	.+24     	; 0x6d8 <Endpoint_Write_Control_Stream_LE+0xa6>
 6c0:	1d 91       	ld	r17, X+
 6c2:	e6 01       	movw	r28, r12
 6c4:	18 83       	st	Y, r17
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	31 09       	sbc	r19, r1
 6ca:	01 96       	adiw	r24, 0x01	; 1
 6cc:	21 15       	cp	r18, r1
 6ce:	31 05       	cpc	r19, r1
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <Endpoint_Write_Control_Stream_LE+0xa6>
 6d2:	88 30       	cpi	r24, 0x08	; 8
 6d4:	91 05       	cpc	r25, r1
 6d6:	a1 f7       	brne	.-24     	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0x8e>
 6d8:	10 2f       	mov	r17, r16
 6da:	08 97       	sbiw	r24, 0x08	; 8
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <Endpoint_Write_Control_Stream_LE+0xae>
 6de:	1f 2d       	mov	r17, r15
 6e0:	80 81       	ld	r24, Z
 6e2:	8e 77       	andi	r24, 0x7E	; 126
 6e4:	80 83       	st	Z, r24
 6e6:	21 15       	cp	r18, r1
 6e8:	31 05       	cpc	r19, r1
 6ea:	69 f6       	brne	.-102    	; 0x686 <Endpoint_Write_Control_Stream_LE+0x54>
 6ec:	11 11       	cpse	r17, r1
 6ee:	cb cf       	rjmp	.-106    	; 0x686 <Endpoint_Write_Control_Stream_LE+0x54>
 6f0:	0a c0       	rjmp	.+20     	; 0x706 <Endpoint_Write_Control_Stream_LE+0xd4>
 6f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 6f6:	88 23       	and	r24, r24
 6f8:	99 f0       	breq	.+38     	; 0x720 <Endpoint_Write_Control_Stream_LE+0xee>
 6fa:	85 30       	cpi	r24, 0x05	; 5
 6fc:	99 f0       	breq	.+38     	; 0x724 <Endpoint_Write_Control_Stream_LE+0xf2>
 6fe:	80 81       	ld	r24, Z
 700:	83 ff       	sbrs	r24, 3
 702:	03 c0       	rjmp	.+6      	; 0x70a <Endpoint_Write_Control_Stream_LE+0xd8>
 704:	11 c0       	rjmp	.+34     	; 0x728 <Endpoint_Write_Control_Stream_LE+0xf6>
 706:	e8 ee       	ldi	r30, 0xE8	; 232
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	82 ff       	sbrs	r24, 2
 70e:	f1 cf       	rjmp	.-30     	; 0x6f2 <Endpoint_Write_Control_Stream_LE+0xc0>
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	0b c0       	rjmp	.+22     	; 0x72a <Endpoint_Write_Control_Stream_LE+0xf8>
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	09 c0       	rjmp	.+18     	; 0x72a <Endpoint_Write_Control_Stream_LE+0xf8>
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	07 c0       	rjmp	.+14     	; 0x72a <Endpoint_Write_Control_Stream_LE+0xf8>
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	05 c0       	rjmp	.+10     	; 0x72a <Endpoint_Write_Control_Stream_LE+0xf8>
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	03 c0       	rjmp	.+6      	; 0x72a <Endpoint_Write_Control_Stream_LE+0xf8>
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	01 c0       	rjmp	.+2      	; 0x72a <Endpoint_Write_Control_Stream_LE+0xf8>
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	ff 90       	pop	r15
 734:	df 90       	pop	r13
 736:	cf 90       	pop	r12
 738:	08 95       	ret

0000073a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 73a:	cf 92       	push	r12
 73c:	df 92       	push	r13
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 748:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <USB_ControlRequest+0x6>
 74c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <USB_ControlRequest+0x7>
 750:	26 17       	cp	r18, r22
 752:	37 07       	cpc	r19, r23
 754:	58 f0       	brcs	.+22     	; 0x76c <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 756:	61 15       	cp	r22, r1
 758:	71 05       	cpc	r23, r1
 75a:	39 f4       	brne	.+14     	; 0x76a <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 75c:	e8 ee       	ldi	r30, 0xE8	; 232
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	20 81       	ld	r18, Z
 762:	2e 77       	andi	r18, 0x7E	; 126
 764:	20 83       	st	Z, r18
 766:	9b 01       	movw	r18, r22
 768:	01 c0       	rjmp	.+2      	; 0x76c <Endpoint_Write_Control_PStream_LE+0x32>
 76a:	9b 01       	movw	r18, r22
 76c:	e8 2f       	mov	r30, r24
 76e:	f9 2f       	mov	r31, r25
 770:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 772:	a8 ee       	ldi	r26, 0xE8	; 232
 774:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 776:	63 ef       	ldi	r22, 0xF3	; 243
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	42 ef       	ldi	r20, 0xF2	; 242
 77c:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 77e:	0f 2e       	mov	r0, r31
 780:	f1 ef       	ldi	r31, 0xF1	; 241
 782:	cf 2e       	mov	r12, r31
 784:	d1 2c       	mov	r13, r1
 786:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 788:	01 e0       	ldi	r16, 0x01	; 1
 78a:	f1 2c       	mov	r15, r1
 78c:	31 c0       	rjmp	.+98     	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0xb6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 78e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 792:	88 23       	and	r24, r24
 794:	09 f4       	brne	.+2      	; 0x798 <Endpoint_Write_Control_PStream_LE+0x5e>
 796:	43 c0       	rjmp	.+134    	; 0x81e <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 798:	85 30       	cpi	r24, 0x05	; 5
 79a:	09 f4       	brne	.+2      	; 0x79e <Endpoint_Write_Control_PStream_LE+0x64>
 79c:	42 c0       	rjmp	.+132    	; 0x822 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 79e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7a0:	83 fd       	sbrc	r24, 3
 7a2:	41 c0       	rjmp	.+130    	; 0x826 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7a4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 7a6:	82 fd       	sbrc	r24, 2
 7a8:	33 c0       	rjmp	.+102    	; 0x810 <Endpoint_Write_Control_PStream_LE+0xd6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7aa:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
 7ac:	80 ff       	sbrs	r24, 0
 7ae:	20 c0       	rjmp	.+64     	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0xb6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 7b0:	eb 01       	movw	r28, r22
 7b2:	18 81       	ld	r17, Y
 7b4:	ea 01       	movw	r28, r20
 7b6:	88 81       	ld	r24, Y
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7bc:	21 15       	cp	r18, r1
 7be:	31 05       	cpc	r19, r1
 7c0:	81 f0       	breq	.+32     	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0xa8>
 7c2:	88 30       	cpi	r24, 0x08	; 8
 7c4:	91 05       	cpc	r25, r1
 7c6:	68 f4       	brcc	.+26     	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0xa8>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7c8:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7ca:	e6 01       	movw	r28, r12
 7cc:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 7ce:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 7d0:	21 50       	subi	r18, 0x01	; 1
 7d2:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 7d4:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7d6:	21 15       	cp	r18, r1
 7d8:	31 05       	cpc	r19, r1
 7da:	19 f0       	breq	.+6      	; 0x7e2 <Endpoint_Write_Control_PStream_LE+0xa8>
 7dc:	88 30       	cpi	r24, 0x08	; 8
 7de:	91 05       	cpc	r25, r1
 7e0:	99 f7       	brne	.-26     	; 0x7c8 <Endpoint_Write_Control_PStream_LE+0x8e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7e2:	10 2f       	mov	r17, r16
 7e4:	08 97       	sbiw	r24, 0x08	; 8
 7e6:	09 f0       	breq	.+2      	; 0x7ea <Endpoint_Write_Control_PStream_LE+0xb0>
 7e8:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7ea:	8c 91       	ld	r24, X
 7ec:	8e 77       	andi	r24, 0x7E	; 126
 7ee:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7f0:	21 15       	cp	r18, r1
 7f2:	31 05       	cpc	r19, r1
 7f4:	61 f6       	brne	.-104    	; 0x78e <Endpoint_Write_Control_PStream_LE+0x54>
 7f6:	11 11       	cpse	r17, r1
 7f8:	ca cf       	rjmp	.-108    	; 0x78e <Endpoint_Write_Control_PStream_LE+0x54>
 7fa:	0a c0       	rjmp	.+20     	; 0x810 <Endpoint_Write_Control_PStream_LE+0xd6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 800:	88 23       	and	r24, r24
 802:	99 f0       	breq	.+38     	; 0x82a <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 804:	85 30       	cpi	r24, 0x05	; 5
 806:	99 f0       	breq	.+38     	; 0x82e <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 808:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 80a:	83 ff       	sbrs	r24, 3
 80c:	03 c0       	rjmp	.+6      	; 0x814 <Endpoint_Write_Control_PStream_LE+0xda>
 80e:	11 c0       	rjmp	.+34     	; 0x832 <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 810:	e8 ee       	ldi	r30, 0xE8	; 232
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 816:	82 ff       	sbrs	r24, 2
 818:	f1 cf       	rjmp	.-30     	; 0x7fc <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	0b c0       	rjmp	.+22     	; 0x834 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	09 c0       	rjmp	.+18     	; 0x834 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 822:	83 e0       	ldi	r24, 0x03	; 3
 824:	07 c0       	rjmp	.+14     	; 0x834 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	05 c0       	rjmp	.+10     	; 0x834 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	03 c0       	rjmp	.+6      	; 0x834 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	01 c0       	rjmp	.+2      	; 0x834 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 832:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	1f 91       	pop	r17
 83a:	0f 91       	pop	r16
 83c:	ff 90       	pop	r15
 83e:	df 90       	pop	r13
 840:	cf 90       	pop	r12
 842:	08 95       	ret

00000844 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 844:	8f 92       	push	r8
 846:	9f 92       	push	r9
 848:	bf 92       	push	r11
 84a:	cf 92       	push	r12
 84c:	df 92       	push	r13
 84e:	ef 92       	push	r14
 850:	ff 92       	push	r15
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	87 30       	cpi	r24, 0x07	; 7
 85c:	70 f1       	brcs	.+92     	; 0x8ba <Endpoint_ConfigureEndpoint_Prv+0x76>
 85e:	26 c0       	rjmp	.+76     	; 0x8ac <Endpoint_ConfigureEndpoint_Prv+0x68>
 860:	29 2f       	mov	r18, r25
 862:	2f 70       	andi	r18, 0x0F	; 15
 864:	e7 01       	movw	r28, r14
 866:	28 83       	st	Y, r18
 868:	89 17       	cp	r24, r25
 86a:	31 f0       	breq	.+12     	; 0x878 <Endpoint_ConfigureEndpoint_Prv+0x34>
 86c:	e8 01       	movw	r28, r16
 86e:	78 81       	ld	r23, Y
 870:	20 81       	ld	r18, Z
 872:	e4 01       	movw	r28, r8
 874:	58 81       	ld	r21, Y
 876:	03 c0       	rjmp	.+6      	; 0x87e <Endpoint_ConfigureEndpoint_Prv+0x3a>
 878:	24 2f       	mov	r18, r20
 87a:	76 2f       	mov	r23, r22
 87c:	5b 2d       	mov	r21, r11
 87e:	21 ff       	sbrs	r18, 1
 880:	12 c0       	rjmp	.+36     	; 0x8a6 <Endpoint_ConfigureEndpoint_Prv+0x62>
 882:	3c 91       	ld	r19, X
 884:	3e 7f       	andi	r19, 0xFE	; 254
 886:	3c 93       	st	X, r19
 888:	30 81       	ld	r19, Z
 88a:	3d 7f       	andi	r19, 0xFD	; 253
 88c:	30 83       	st	Z, r19
 88e:	3c 91       	ld	r19, X
 890:	31 60       	ori	r19, 0x01	; 1
 892:	3c 93       	st	X, r19
 894:	e8 01       	movw	r28, r16
 896:	78 83       	st	Y, r23
 898:	20 83       	st	Z, r18
 89a:	e4 01       	movw	r28, r8
 89c:	58 83       	st	Y, r21
 89e:	e6 01       	movw	r28, r12
 8a0:	28 81       	ld	r18, Y
 8a2:	22 23       	and	r18, r18
 8a4:	44 f4       	brge	.+16     	; 0x8b6 <Endpoint_ConfigureEndpoint_Prv+0x72>
 8a6:	9f 5f       	subi	r25, 0xFF	; 255
 8a8:	97 30       	cpi	r25, 0x07	; 7
 8aa:	d1 f6       	brne	.-76     	; 0x860 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 8ac:	8f 70       	andi	r24, 0x0F	; 15
 8ae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	21 c0       	rjmp	.+66     	; 0x8f8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	1f c0       	rjmp	.+62     	; 0x8f8 <Endpoint_ConfigureEndpoint_Prv+0xb4>
 8ba:	98 2f       	mov	r25, r24
 8bc:	9f 70       	andi	r25, 0x0F	; 15
 8be:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 8c2:	98 2f       	mov	r25, r24
 8c4:	24 2f       	mov	r18, r20
 8c6:	76 2f       	mov	r23, r22
 8c8:	50 e0       	ldi	r21, 0x00	; 0
 8ca:	ab ee       	ldi	r26, 0xEB	; 235
 8cc:	b0 e0       	ldi	r27, 0x00	; 0
 8ce:	ed ee       	ldi	r30, 0xED	; 237
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	0c ee       	ldi	r16, 0xEC	; 236
 8d4:	10 e0       	ldi	r17, 0x00	; 0
 8d6:	0f 2e       	mov	r0, r31
 8d8:	f0 ef       	ldi	r31, 0xF0	; 240
 8da:	8f 2e       	mov	r8, r31
 8dc:	91 2c       	mov	r9, r1
 8de:	f0 2d       	mov	r31, r0
 8e0:	0f 2e       	mov	r0, r31
 8e2:	fe ee       	ldi	r31, 0xEE	; 238
 8e4:	cf 2e       	mov	r12, r31
 8e6:	d1 2c       	mov	r13, r1
 8e8:	f0 2d       	mov	r31, r0
 8ea:	0f 2e       	mov	r0, r31
 8ec:	f9 ee       	ldi	r31, 0xE9	; 233
 8ee:	ef 2e       	mov	r14, r31
 8f0:	f1 2c       	mov	r15, r1
 8f2:	f0 2d       	mov	r31, r0
 8f4:	b1 2c       	mov	r11, r1
 8f6:	c3 cf       	rjmp	.-122    	; 0x87e <Endpoint_ConfigureEndpoint_Prv+0x3a>
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	ff 90       	pop	r15
 902:	ef 90       	pop	r14
 904:	df 90       	pop	r13
 906:	cf 90       	pop	r12
 908:	bf 90       	pop	r11
 90a:	9f 90       	pop	r9
 90c:	8f 90       	pop	r8
 90e:	08 95       	ret

00000910 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 910:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <USB_ControlRequest>
 914:	88 23       	and	r24, r24
 916:	44 f0       	brlt	.+16     	; 0x928 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 918:	e8 ee       	ldi	r30, 0xE8	; 232
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	14 c0       	rjmp	.+40     	; 0x946 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 91e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 922:	81 11       	cpse	r24, r1
 924:	03 c0       	rjmp	.+6      	; 0x92c <Endpoint_ClearStatusStage+0x1c>
 926:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 928:	e8 ee       	ldi	r30, 0xE8	; 232
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 92e:	82 ff       	sbrs	r24, 2
 930:	f6 cf       	rjmp	.-20     	; 0x91e <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 932:	e8 ee       	ldi	r30, 0xE8	; 232
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	8b 77       	andi	r24, 0x7B	; 123
 93a:	80 83       	st	Z, r24
 93c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 93e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 942:	88 23       	and	r24, r24
 944:	41 f0       	breq	.+16     	; 0x956 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 946:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 948:	80 ff       	sbrs	r24, 0
 94a:	f9 cf       	rjmp	.-14     	; 0x93e <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 94c:	e8 ee       	ldi	r30, 0xE8	; 232
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	8e 77       	andi	r24, 0x7E	; 126
 954:	80 83       	st	Z, r24
 956:	08 95       	ret

00000958 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 960:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 964:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 968:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 96a:	ac ee       	ldi	r26, 0xEC	; 236
 96c:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 96e:	e8 ee       	ldi	r30, 0xE8	; 232
 970:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 972:	0b ee       	ldi	r16, 0xEB	; 235
 974:	10 e0       	ldi	r17, 0x00	; 0
 976:	44 ee       	ldi	r20, 0xE4	; 228
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	01 c0       	rjmp	.+2      	; 0x97e <Endpoint_WaitUntilReady+0x26>
 97c:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 97e:	9c 91       	ld	r25, X
 980:	89 2f       	mov	r24, r25
 982:	81 70       	andi	r24, 0x01	; 1
 984:	90 fd       	sbrc	r25, 0
 986:	1d c0       	rjmp	.+58     	; 0x9c2 <Endpoint_WaitUntilReady+0x6a>
 988:	20 c0       	rjmp	.+64     	; 0x9ca <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 98a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 98e:	88 23       	and	r24, r24
 990:	81 f0       	breq	.+32     	; 0x9b2 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 992:	85 30       	cpi	r24, 0x05	; 5
 994:	81 f0       	breq	.+32     	; 0x9b6 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 996:	e8 01       	movw	r28, r16
 998:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 99a:	85 fd       	sbrc	r24, 5
 99c:	0e c0       	rjmp	.+28     	; 0x9ba <Endpoint_WaitUntilReady+0x62>
 99e:	ea 01       	movw	r28, r20
 9a0:	88 81       	ld	r24, Y
 9a2:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 9a4:	28 17       	cp	r18, r24
 9a6:	39 07       	cpc	r19, r25
 9a8:	51 f3       	breq	.-44     	; 0x97e <Endpoint_WaitUntilReady+0x26>
 9aa:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 9ac:	39 f7       	brne	.-50     	; 0x97c <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
 9ae:	84 e0       	ldi	r24, 0x04	; 4
 9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 9b6:	83 e0       	ldi	r24, 0x03	; 3
 9b8:	0b c0       	rjmp	.+22     	; 0x9d0 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9c2:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 9c4:	80 ff       	sbrs	r24, 0
 9c6:	e1 cf       	rjmp	.-62     	; 0x98a <Endpoint_WaitUntilReady+0x32>
 9c8:	fa cf       	rjmp	.-12     	; 0x9be <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9ca:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 9cc:	92 ff       	sbrs	r25, 2
 9ce:	dd cf       	rjmp	.-70     	; 0x98a <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	1f 91       	pop	r17
 9d6:	0f 91       	pop	r16
 9d8:	08 95       	ret

000009da <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 9da:	0f 93       	push	r16
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 9e0:	df 93       	push	r29
 9e2:	4c d0       	rcall	.+152    	; 0xa7c <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 9e4:	53 d0       	rcall	.+166    	; 0xa8c <USB_INT_ClearAllInterrupts>
 9e6:	c8 ed       	ldi	r28, 0xD8	; 216
 9e8:	d0 e0       	ldi	r29, 0x00	; 0
 9ea:	88 81       	ld	r24, Y
 9ec:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
 9ee:	88 83       	st	Y, r24
 9f0:	88 81       	ld	r24, Y
 9f2:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 9f4:	88 83       	st	Y, r24
 9f6:	88 81       	ld	r24, Y
 9f8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 9fa:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 9fc:	19 bc       	out	0x29, r1	; 41
 9fe:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 a02:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 a06:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 a0a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 a0e:	00 ee       	ldi	r16, 0xE0	; 224
 a10:	10 e0       	ldi	r17, 0x00	; 0
 a12:	f8 01       	movw	r30, r16
 a14:	80 81       	ld	r24, Z
 a16:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 a18:	80 83       	st	Z, r24
 a1a:	88 81       	ld	r24, Y
 a1c:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 a1e:	88 83       	st	Y, r24
 a20:	42 e0       	ldi	r20, 0x02	; 2
 a22:	60 e0       	ldi	r22, 0x00	; 0
 a24:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a26:	0e df       	rcall	.-484    	; 0x844 <Endpoint_ConfigureEndpoint_Prv>
 a28:	e1 ee       	ldi	r30, 0xE1	; 225
 a2a:	f0 e0       	ldi	r31, 0x00	; 0
 a2c:	80 81       	ld	r24, Z
 a2e:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a30:	80 83       	st	Z, r24
 a32:	e2 ee       	ldi	r30, 0xE2	; 226
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	80 81       	ld	r24, Z
 a38:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 a3a:	80 83       	st	Z, r24
 a3c:	80 81       	ld	r24, Z
 a3e:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 a40:	80 83       	st	Z, r24
 a42:	f8 01       	movw	r30, r16
 a44:	80 81       	ld	r24, Z
 a46:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 a48:	80 83       	st	Z, r24
 a4a:	88 81       	ld	r24, Y
 a4c:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 a4e:	88 83       	st	Y, r24
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	08 95       	ret

00000a5a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 a5a:	e8 ed       	ldi	r30, 0xD8	; 216
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	8f 7e       	andi	r24, 0xEF	; 239
 a62:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 a64:	e7 ed       	ldi	r30, 0xD7	; 215
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	81 60       	ori	r24, 0x01	; 1
 a6c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 a6e:	84 e0       	ldi	r24, 0x04	; 4
 a70:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <USB_IsInitialized>

	USB_ResetInterface();
 a78:	b0 cf       	rjmp	.-160    	; 0x9da <USB_ResetInterface>
 a7a:	08 95       	ret

00000a7c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 a7c:	e8 ed       	ldi	r30, 0xD8	; 216
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	8e 7f       	andi	r24, 0xFE	; 254
 a84:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a86:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a8a:	08 95       	ret

00000a8c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 a8c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a90:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a94:	08 95       	ret

00000a96 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a96:	1f 92       	push	r1
 a98:	0f 92       	push	r0
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	0f 92       	push	r0
 a9e:	11 24       	eor	r1, r1
 aa0:	2f 93       	push	r18
 aa2:	3f 93       	push	r19
 aa4:	4f 93       	push	r20
 aa6:	5f 93       	push	r21
 aa8:	6f 93       	push	r22
 aaa:	7f 93       	push	r23
 aac:	8f 93       	push	r24
 aae:	9f 93       	push	r25
 ab0:	af 93       	push	r26
 ab2:	bf 93       	push	r27
 ab4:	ef 93       	push	r30
 ab6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 ab8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 abc:	82 ff       	sbrs	r24, 2
 abe:	0a c0       	rjmp	.+20     	; 0xad4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 ac0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ac4:	82 ff       	sbrs	r24, 2
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 ac8:	e1 ee       	ldi	r30, 0xE1	; 225
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	80 81       	ld	r24, Z
 ace:	8b 7f       	andi	r24, 0xFB	; 251
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 ad0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 ad2:	19 d2       	rcall	.+1074   	; 0xf06 <USB_Event_Stub>
 ad4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 ad8:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 ada:	1d c0       	rjmp	.+58     	; 0xb16 <__stack+0x17>
 adc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 ae0:	80 ff       	sbrs	r24, 0
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 ae2:	19 c0       	rjmp	.+50     	; 0xb16 <__stack+0x17>
 ae4:	ea ed       	ldi	r30, 0xDA	; 218
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	80 81       	ld	r24, Z
 aea:	8e 7f       	andi	r24, 0xFE	; 254
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 aec:	80 83       	st	Z, r24
 aee:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 af2:	80 ff       	sbrs	r24, 0

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 af4:	0c c0       	rjmp	.+24     	; 0xb0e <__stack+0xf>
 af6:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 af8:	89 bd       	out	0x29, r24	; 41
 afa:	82 e1       	ldi	r24, 0x12	; 18
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 afc:	89 bd       	out	0x29, r24	; 41
 afe:	09 b4       	in	r0, 0x29	; 41
 b00:	00 fe       	sbrs	r0, 0
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 b02:	fd cf       	rjmp	.-6      	; 0xafe <__vector_10+0x68>
 b04:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
 b06:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
 b0a:	d0 db       	rcall	.-2144   	; 0x2ac <EVENT_USB_Device_Connect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__stack+0x17>
			EVENT_USB_Device_Disconnect();
 b0e:	19 bc       	out	0x29, r1	; 41
 b10:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USB_DeviceState>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 b14:	cf db       	rcall	.-2146   	; 0x2b4 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 b16:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 b1a:	80 ff       	sbrs	r24, 0
 b1c:	16 c0       	rjmp	.+44     	; 0xb4a <__stack+0x4b>
 b1e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b22:	80 ff       	sbrs	r24, 0
 b24:	12 c0       	rjmp	.+36     	; 0xb4a <__stack+0x4b>
 b26:	e2 ee       	ldi	r30, 0xE2	; 226
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b2c:	8e 7f       	andi	r24, 0xFE	; 254
 b2e:	80 83       	st	Z, r24
 b30:	80 81       	ld	r24, Z
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 b32:	80 61       	ori	r24, 0x10	; 16
 b34:	80 83       	st	Z, r24
 b36:	e8 ed       	ldi	r30, 0xD8	; 216
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	80 81       	ld	r24, Z

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 b3c:	80 62       	ori	r24, 0x20	; 32
 b3e:	80 83       	st	Z, r24
		EVENT_USB_Device_Suspend();
 b40:	19 bc       	out	0x29, r1	; 41
 b42:	85 e0       	ldi	r24, 0x05	; 5
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 b44:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 b48:	de d1       	rcall	.+956    	; 0xf06 <USB_Event_Stub>
 b4a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 b4e:	84 ff       	sbrs	r24, 4
 b50:	2f c0       	rjmp	.+94     	; 0xbb0 <__stack+0xb1>
 b52:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 b56:	84 ff       	sbrs	r24, 4
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 b58:	2b c0       	rjmp	.+86     	; 0xbb0 <__stack+0xb1>
 b5a:	80 e1       	ldi	r24, 0x10	; 16
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 b5c:	89 bd       	out	0x29, r24	; 41
 b5e:	82 e1       	ldi	r24, 0x12	; 18
 b60:	89 bd       	out	0x29, r24	; 41
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 b62:	09 b4       	in	r0, 0x29	; 41
 b64:	00 fe       	sbrs	r0, 0
 b66:	fd cf       	rjmp	.-6      	; 0xb62 <__stack+0x63>
 b68:	e8 ed       	ldi	r30, 0xD8	; 216
 b6a:	f0 e0       	ldi	r31, 0x00	; 0
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 b6c:	80 81       	ld	r24, Z
 b6e:	8f 7d       	andi	r24, 0xDF	; 223
 b70:	80 83       	st	Z, r24
 b72:	e1 ee       	ldi	r30, 0xE1	; 225
 b74:	f0 e0       	ldi	r31, 0x00	; 0
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 b76:	80 81       	ld	r24, Z
 b78:	8f 7e       	andi	r24, 0xEF	; 239
 b7a:	80 83       	st	Z, r24
 b7c:	e2 ee       	ldi	r30, 0xE2	; 226
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 b80:	80 81       	ld	r24, Z
 b82:	8f 7e       	andi	r24, 0xEF	; 239
 b84:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b86:	80 81       	ld	r24, Z
 b88:	81 60       	ori	r24, 0x01	; 1
 b8a:	80 83       	st	Z, r24
 b8c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_ConfigurationNumber>
		  USB_DeviceState = DEVICE_STATE_Configured;
 b90:	88 23       	and	r24, r24
 b92:	21 f0       	breq	.+8      	; 0xb9c <__stack+0x9d>
 b94:	84 e0       	ldi	r24, 0x04	; 4
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b96:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b9a:	09 c0       	rjmp	.+18     	; 0xbae <__stack+0xaf>
 b9c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 ba0:	88 23       	and	r24, r24
 ba2:	14 f0       	brlt	.+4      	; 0xba8 <__stack+0xa9>
 ba4:	81 e0       	ldi	r24, 0x01	; 1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <__stack+0xab>
 ba8:	83 e0       	ldi	r24, 0x03	; 3
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 baa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 bae:	ab d1       	rcall	.+854    	; 0xf06 <USB_Event_Stub>
 bb0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 bb4:	83 ff       	sbrs	r24, 3
 bb6:	1e c0       	rjmp	.+60     	; 0xbf4 <__stack+0xf5>
 bb8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 bbc:	83 ff       	sbrs	r24, 3
 bbe:	1a c0       	rjmp	.+52     	; 0xbf4 <__stack+0xf5>
 bc0:	e1 ee       	ldi	r30, 0xE1	; 225
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 bc4:	80 81       	ld	r24, Z
 bc6:	87 7f       	andi	r24, 0xF7	; 247
 bc8:	80 83       	st	Z, r24
		USB_Device_ConfigurationNumber = 0;
 bca:	82 e0       	ldi	r24, 0x02	; 2
 bcc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 bd0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 bd4:	80 81       	ld	r24, Z
 bd6:	8e 7f       	andi	r24, 0xFE	; 254
 bd8:	80 83       	st	Z, r24
 bda:	e2 ee       	ldi	r30, 0xE2	; 226
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 bde:	80 81       	ld	r24, Z
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 be0:	8e 7f       	andi	r24, 0xFE	; 254
 be2:	80 83       	st	Z, r24
 be4:	80 81       	ld	r24, Z
 be6:	80 61       	ori	r24, 0x10	; 16
 be8:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 bea:	42 e0       	ldi	r20, 0x02	; 2
 bec:	60 e0       	ldi	r22, 0x00	; 0
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 bee:	80 e0       	ldi	r24, 0x00	; 0
 bf0:	29 de       	rcall	.-942    	; 0x844 <Endpoint_ConfigureEndpoint_Prv>
 bf2:	89 d1       	rcall	.+786    	; 0xf06 <USB_Event_Stub>
 bf4:	ff 91       	pop	r31
 bf6:	ef 91       	pop	r30
 bf8:	bf 91       	pop	r27
 bfa:	af 91       	pop	r26
 bfc:	9f 91       	pop	r25
 bfe:	8f 91       	pop	r24
 c00:	7f 91       	pop	r23
 c02:	6f 91       	pop	r22
 c04:	5f 91       	pop	r21
 c06:	4f 91       	pop	r20
 c08:	3f 91       	pop	r19
 c0a:	2f 91       	pop	r18
 c0c:	0f 90       	pop	r0
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	0f 90       	pop	r0
 c12:	1f 90       	pop	r1
 c14:	18 95       	reti

00000c16 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 c16:	0f 93       	push	r16
 c18:	1f 93       	push	r17
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
 c1e:	cd b7       	in	r28, 0x3d	; 61
 c20:	de b7       	in	r29, 0x3e	; 62
 c22:	aa 97       	sbiw	r28, 0x2a	; 42
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	f8 94       	cli
 c28:	de bf       	out	0x3e, r29	; 62
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	cd bf       	out	0x3d, r28	; 61
 c2e:	e7 e0       	ldi	r30, 0x07	; 7
 c30:	f1 e0       	ldi	r31, 0x01	; 1
 c32:	2f e0       	ldi	r18, 0x0F	; 15
 c34:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c36:	a1 ef       	ldi	r26, 0xF1	; 241
 c38:	b0 e0       	ldi	r27, 0x00	; 0
 c3a:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 c3c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 c3e:	2e 17       	cp	r18, r30
 c40:	3f 07       	cpc	r19, r31
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 c42:	d9 f7       	brne	.-10     	; 0xc3a <USB_Device_ProcessControlRequest+0x24>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c44:	33 dc       	rcall	.-1946   	; 0x4ac <EVENT_USB_Device_ControlRequest>
 c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 c4a:	83 ff       	sbrs	r24, 3
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c4c:	37 c1       	rjmp	.+622    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 c4e:	e7 e0       	ldi	r30, 0x07	; 7
 c50:	f1 e0       	ldi	r31, 0x01	; 1

		switch (USB_ControlRequest.bRequest)
 c52:	90 81       	ld	r25, Z
 c54:	81 81       	ldd	r24, Z+1	; 0x01
 c56:	85 30       	cpi	r24, 0x05	; 5
 c58:	09 f4       	brne	.+2      	; 0xc5c <USB_Device_ProcessControlRequest+0x46>
 c5a:	7f c0       	rjmp	.+254    	; 0xd5a <USB_Device_ProcessControlRequest+0x144>
 c5c:	30 f4       	brcc	.+12     	; 0xc6a <USB_Device_ProcessControlRequest+0x54>
 c5e:	81 30       	cpi	r24, 0x01	; 1
 c60:	c9 f1       	breq	.+114    	; 0xcd4 <USB_Device_ProcessControlRequest+0xbe>
 c62:	68 f0       	brcs	.+26     	; 0xc7e <USB_Device_ProcessControlRequest+0x68>
 c64:	83 30       	cpi	r24, 0x03	; 3
 c66:	b1 f1       	breq	.+108    	; 0xcd4 <USB_Device_ProcessControlRequest+0xbe>
 c68:	29 c1       	rjmp	.+594    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 c6a:	88 30       	cpi	r24, 0x08	; 8
 c6c:	09 f4       	brne	.+2      	; 0xc70 <USB_Device_ProcessControlRequest+0x5a>
 c6e:	f1 c0       	rjmp	.+482    	; 0xe52 <USB_Device_ProcessControlRequest+0x23c>
 c70:	89 30       	cpi	r24, 0x09	; 9
 c72:	09 f4       	brne	.+2      	; 0xc76 <USB_Device_ProcessControlRequest+0x60>
 c74:	fe c0       	rjmp	.+508    	; 0xe72 <USB_Device_ProcessControlRequest+0x25c>
 c76:	86 30       	cpi	r24, 0x06	; 6
 c78:	09 f0       	breq	.+2      	; 0xc7c <USB_Device_ProcessControlRequest+0x66>
 c7a:	20 c1       	rjmp	.+576    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c7c:	91 c0       	rjmp	.+290    	; 0xda0 <USB_Device_ProcessControlRequest+0x18a>
 c7e:	90 38       	cpi	r25, 0x80	; 128
 c80:	21 f0       	breq	.+8      	; 0xc8a <USB_Device_ProcessControlRequest+0x74>
 c82:	92 38       	cpi	r25, 0x82	; 130
 c84:	09 f0       	breq	.+2      	; 0xc88 <USB_Device_ProcessControlRequest+0x72>
 c86:	1a c1       	rjmp	.+564    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 c88:	08 c0       	rjmp	.+16     	; 0xc9a <USB_Device_ProcessControlRequest+0x84>
 c8a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 c8e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <USB_Device_RemoteWakeupEnabled>
 c92:	99 23       	and	r25, r25
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c94:	89 f0       	breq	.+34     	; 0xcb8 <USB_Device_ProcessControlRequest+0xa2>
 c96:	82 60       	ori	r24, 0x02	; 2
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c98:	0f c0       	rjmp	.+30     	; 0xcb8 <USB_Device_ProcessControlRequest+0xa2>
 c9a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_ControlRequest+0x4>

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c9e:	8f 70       	andi	r24, 0x0F	; 15
 ca0:	87 30       	cpi	r24, 0x07	; 7
 ca2:	08 f0       	brcs	.+2      	; 0xca6 <USB_Device_ProcessControlRequest+0x90>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 ca4:	0b c1       	rjmp	.+534    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 ca6:	e9 ee       	ldi	r30, 0xE9	; 233
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 caa:	80 83       	st	Z, r24
 cac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 cb0:	85 fb       	bst	r24, 5
 cb2:	88 27       	eor	r24, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cb4:	80 f9       	bld	r24, 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb6:	10 82       	st	Z, r1
 cb8:	e8 ee       	ldi	r30, 0xE8	; 232
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	90 81       	ld	r25, Z
 cbe:	97 7f       	andi	r25, 0xF7	; 247
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 cc0:	90 83       	st	Z, r25
 cc2:	a1 ef       	ldi	r26, 0xF1	; 241
 cc4:	b0 e0       	ldi	r27, 0x00	; 0
				UEDATX = (Data >> 8);
 cc6:	8c 93       	st	X, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cc8:	1c 92       	st	X, r1
 cca:	80 81       	ld	r24, Z
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 ccc:	8e 77       	andi	r24, 0x7E	; 126
 cce:	80 83       	st	Z, r24
 cd0:	1f de       	rcall	.-962    	; 0x910 <Endpoint_ClearStatusStage>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cd2:	f4 c0       	rjmp	.+488    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 cd4:	99 23       	and	r25, r25
 cd6:	09 f4       	brne	.+2      	; 0xcda <USB_Device_ProcessControlRequest+0xc4>
 cd8:	00 c1       	rjmp	.+512    	; 0xeda <USB_Device_ProcessControlRequest+0x2c4>
 cda:	92 30       	cpi	r25, 0x02	; 2
 cdc:	09 f0       	breq	.+2      	; 0xce0 <USB_Device_ProcessControlRequest+0xca>
 cde:	ee c0       	rjmp	.+476    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 ce0:	01 c1       	rjmp	.+514    	; 0xee4 <USB_Device_ProcessControlRequest+0x2ce>
 ce2:	91 e0       	ldi	r25, 0x01	; 1
 ce4:	83 30       	cpi	r24, 0x03	; 3
 ce6:	09 f0       	breq	.+2      	; 0xcea <USB_Device_ProcessControlRequest+0xd4>
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <USB_Device_RemoteWakeupEnabled>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 cee:	2c c0       	rjmp	.+88     	; 0xd48 <USB_Device_ProcessControlRequest+0x132>
 cf0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <USB_ControlRequest+0x4>

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 cf4:	8f 70       	andi	r24, 0x0F	; 15
 cf6:	9f ef       	ldi	r25, 0xFF	; 255
 cf8:	98 0f       	add	r25, r24
 cfa:	96 30       	cpi	r25, 0x06	; 6
 cfc:	08 f0       	brcs	.+2      	; 0xd00 <USB_Device_ProcessControlRequest+0xea>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cfe:	de c0       	rjmp	.+444    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 d00:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 d04:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 d08:	90 ff       	sbrs	r25, 0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 d0a:	1e c0       	rjmp	.+60     	; 0xd48 <USB_Device_ProcessControlRequest+0x132>
 d0c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <USB_ControlRequest+0x1>
 d10:	93 30       	cpi	r25, 0x03	; 3
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d12:	31 f4       	brne	.+12     	; 0xd20 <USB_Device_ProcessControlRequest+0x10a>
 d14:	eb ee       	ldi	r30, 0xEB	; 235
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	80 81       	ld	r24, Z
 d1a:	80 62       	ori	r24, 0x20	; 32
 d1c:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 d1e:	14 c0       	rjmp	.+40     	; 0xd48 <USB_Device_ProcessControlRequest+0x132>
 d20:	eb ee       	ldi	r30, 0xEB	; 235
 d22:	f0 e0       	ldi	r31, 0x00	; 0
 d24:	90 81       	ld	r25, Z
 d26:	90 61       	ori	r25, 0x10	; 16
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 d28:	90 83       	st	Z, r25
 d2a:	21 e0       	ldi	r18, 0x01	; 1
 d2c:	30 e0       	ldi	r19, 0x00	; 0
 d2e:	a9 01       	movw	r20, r18
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <USB_Device_ProcessControlRequest+0x120>
 d32:	44 0f       	add	r20, r20
 d34:	55 1f       	adc	r21, r21
 d36:	8a 95       	dec	r24
 d38:	e2 f7       	brpl	.-8      	; 0xd32 <USB_Device_ProcessControlRequest+0x11c>
 d3a:	aa ee       	ldi	r26, 0xEA	; 234
 d3c:	b0 e0       	ldi	r27, 0x00	; 0
				UERST = 0;
 d3e:	4c 93       	st	X, r20

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 d40:	1c 92       	st	X, r1
 d42:	80 81       	ld	r24, Z
 d44:	88 60       	ori	r24, 0x08	; 8
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d46:	80 83       	st	Z, r24
 d48:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d4c:	e8 ee       	ldi	r30, 0xE8	; 232
 d4e:	f0 e0       	ldi	r31, 0x00	; 0
 d50:	80 81       	ld	r24, Z

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	80 83       	st	Z, r24
 d56:	dc dd       	rcall	.-1096   	; 0x910 <Endpoint_ClearStatusStage>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d58:	b1 c0       	rjmp	.+354    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 d5a:	91 11       	cpse	r25, r1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 d5c:	af c0       	rjmp	.+350    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 d5e:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 d62:	1f 77       	andi	r17, 0x7F	; 127
 d64:	e3 ee       	ldi	r30, 0xE3	; 227
 d66:	f0 e0       	ldi	r31, 0x00	; 0
 d68:	80 81       	ld	r24, Z
 d6a:	80 78       	andi	r24, 0x80	; 128
 d6c:	81 2b       	or	r24, r17
 d6e:	80 83       	st	Z, r24
 d70:	e8 ee       	ldi	r30, 0xE8	; 232
 d72:	f0 e0       	ldi	r31, 0x00	; 0
 d74:	80 81       	ld	r24, Z

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 d76:	87 7f       	andi	r24, 0xF7	; 247
 d78:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 d7a:	ca dd       	rcall	.-1132   	; 0x910 <Endpoint_ClearStatusStage>
 d7c:	e8 ee       	ldi	r30, 0xE8	; 232
 d7e:	f0 e0       	ldi	r31, 0x00	; 0

	while (!(Endpoint_IsINReady()));
 d80:	80 81       	ld	r24, Z
 d82:	80 ff       	sbrs	r24, 0
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 d84:	fd cf       	rjmp	.-6      	; 0xd80 <USB_Device_ProcessControlRequest+0x16a>
 d86:	e3 ee       	ldi	r30, 0xE3	; 227
 d88:	f0 e0       	ldi	r31, 0x00	; 0
 d8a:	80 81       	ld	r24, Z
 d8c:	80 68       	ori	r24, 0x80	; 128

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d8e:	80 83       	st	Z, r24
 d90:	11 11       	cpse	r17, r1
 d92:	02 c0       	rjmp	.+4      	; 0xd98 <USB_Device_ProcessControlRequest+0x182>
 d94:	82 e0       	ldi	r24, 0x02	; 2
 d96:	01 c0       	rjmp	.+2      	; 0xd9a <USB_Device_ProcessControlRequest+0x184>
 d98:	83 e0       	ldi	r24, 0x03	; 3
 d9a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d9e:	8e c0       	rjmp	.+284    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 da0:	90 58       	subi	r25, 0x80	; 128
 da2:	92 30       	cpi	r25, 0x02	; 2
 da4:	08 f0       	brcs	.+2      	; 0xda8 <USB_Device_ProcessControlRequest+0x192>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 da6:	8a c0       	rjmp	.+276    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 da8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 dac:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <USB_ControlRequest+0x3>
 db0:	8c 3d       	cpi	r24, 0xDC	; 220
 db2:	53 e0       	ldi	r21, 0x03	; 3
 db4:	95 07       	cpc	r25, r21
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 db6:	99 f5       	brne	.+102    	; 0xe1e <USB_Device_ProcessControlRequest+0x208>
 db8:	83 e0       	ldi	r24, 0x03	; 3
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 dba:	8a 83       	std	Y+2, r24	; 0x02
 dbc:	8a e2       	ldi	r24, 0x2A	; 42
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 dbe:	89 83       	std	Y+1, r24	; 0x01
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 dc0:	5f b7       	in	r21, 0x3f	; 63
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 dc2:	f8 94       	cli
 dc4:	de 01       	movw	r26, r28
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 dc6:	13 96       	adiw	r26, 0x03	; 3
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 dc8:	20 e0       	ldi	r18, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 dca:	3e e0       	ldi	r19, 0x0E	; 14
 dcc:	41 e2       	ldi	r20, 0x21	; 33
 dce:	e3 2f       	mov	r30, r19
 dd0:	f0 e0       	ldi	r31, 0x00	; 0
 dd2:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>

					if (SerialCharNum & 0x01)
 dd6:	84 91       	lpm	r24, Z
 dd8:	20 ff       	sbrs	r18, 0
					{
						SerialByte >>= 4;
 dda:	03 c0       	rjmp	.+6      	; 0xde2 <USB_Device_ProcessControlRequest+0x1cc>
 ddc:	82 95       	swap	r24
						SigReadAddress++;
 dde:	8f 70       	andi	r24, 0x0F	; 15
					}

					SerialByte &= 0x0F;
 de0:	3f 5f       	subi	r19, 0xFF	; 255

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 de2:	8f 70       	andi	r24, 0x0F	; 15
 de4:	8a 30       	cpi	r24, 0x0A	; 10
 de6:	18 f0       	brcs	.+6      	; 0xdee <USB_Device_ProcessControlRequest+0x1d8>
 de8:	90 e0       	ldi	r25, 0x00	; 0
 dea:	c7 96       	adiw	r24, 0x37	; 55
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <USB_Device_ProcessControlRequest+0x1dc>
 dee:	90 e0       	ldi	r25, 0x00	; 0
 df0:	c0 96       	adiw	r24, 0x30	; 48
 df2:	8d 93       	st	X+, r24
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 df4:	9d 93       	st	X+, r25
 df6:	2f 5f       	subi	r18, 0xFF	; 255
 df8:	24 31       	cpi	r18, 0x14	; 20
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 dfa:	49 f7       	brne	.-46     	; 0xdce <USB_Device_ProcessControlRequest+0x1b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dfc:	5f bf       	out	0x3f, r21	; 63
 dfe:	08 ee       	ldi	r16, 0xE8	; 232
 e00:	10 e0       	ldi	r17, 0x00	; 0
 e02:	f8 01       	movw	r30, r16
 e04:	80 81       	ld	r24, Z

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 e06:	87 7f       	andi	r24, 0xF7	; 247
 e08:	80 83       	st	Z, r24
 e0a:	6a e2       	ldi	r22, 0x2A	; 42
 e0c:	70 e0       	ldi	r23, 0x00	; 0
 e0e:	ce 01       	movw	r24, r28
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e10:	01 96       	adiw	r24, 0x01	; 1
 e12:	0f dc       	rcall	.-2018   	; 0x632 <Endpoint_Write_Control_Stream_LE>
 e14:	f8 01       	movw	r30, r16
 e16:	80 81       	ld	r24, Z
 e18:	8b 77       	andi	r24, 0x7B	; 123
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 e1a:	80 83       	st	Z, r24
 e1c:	4f c0       	rjmp	.+158    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 e1e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <USB_ControlRequest+0x4>
 e22:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <USB_ControlRequest+0x5>
 e26:	ae 01       	movw	r20, r28
 e28:	4f 5f       	subi	r20, 0xFF	; 255
 e2a:	5f 4f       	sbci	r21, 0xFF	; 255
 e2c:	c7 d9       	rcall	.-3186   	; 0x1bc <CALLBACK_USB_GetDescriptor>
 e2e:	bc 01       	movw	r22, r24
 e30:	89 2b       	or	r24, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e32:	09 f4       	brne	.+2      	; 0xe36 <USB_Device_ProcessControlRequest+0x220>
 e34:	43 c0       	rjmp	.+134    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 e36:	08 ee       	ldi	r16, 0xE8	; 232
 e38:	10 e0       	ldi	r17, 0x00	; 0
 e3a:	f8 01       	movw	r30, r16
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 e3c:	90 81       	ld	r25, Z
 e3e:	97 7f       	andi	r25, 0xF7	; 247
 e40:	90 83       	st	Z, r25
 e42:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e44:	9a 81       	ldd	r25, Y+2	; 0x02
 e46:	79 dc       	rcall	.-1806   	; 0x73a <Endpoint_Write_Control_PStream_LE>
 e48:	f8 01       	movw	r30, r16
 e4a:	80 81       	ld	r24, Z
 e4c:	8b 77       	andi	r24, 0x7B	; 123
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 e4e:	80 83       	st	Z, r24
 e50:	35 c0       	rjmp	.+106    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e52:	90 38       	cpi	r25, 0x80	; 128
 e54:	99 f5       	brne	.+102    	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 e56:	e8 ee       	ldi	r30, 0xE8	; 232
 e58:	f0 e0       	ldi	r31, 0x00	; 0

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 e5a:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e5c:	87 7f       	andi	r24, 0xF7	; 247
 e5e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_ConfigurationNumber>
 e64:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 e68:	80 81       	ld	r24, Z
 e6a:	8e 77       	andi	r24, 0x7E	; 126
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e6c:	80 83       	st	Z, r24
 e6e:	50 dd       	rcall	.-1376   	; 0x910 <Endpoint_ClearStatusStage>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e70:	25 c0       	rjmp	.+74     	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 e72:	91 11       	cpse	r25, r1
 e74:	23 c0       	rjmp	.+70     	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 e76:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
 e7a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <USB_ControlRequest+0x3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e7e:	99 27       	eor	r25, r25
 e80:	02 97       	sbiw	r24, 0x02	; 2
 e82:	e4 f4       	brge	.+56     	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 e84:	e8 ee       	ldi	r30, 0xE8	; 232
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e86:	f0 e0       	ldi	r31, 0x00	; 0
 e88:	80 81       	ld	r24, Z
 e8a:	87 7f       	andi	r24, 0xF7	; 247
 e8c:	80 83       	st	Z, r24

	Endpoint_ClearStatusStage();
 e8e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>

	if (USB_Device_ConfigurationNumber)
 e92:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <USB_Device_ConfigurationNumber>
 e96:	3c dd       	rcall	.-1416   	; 0x910 <Endpoint_ClearStatusStage>
 e98:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <USB_Device_ConfigurationNumber>
	  USB_DeviceState = DEVICE_STATE_Configured;
 e9c:	88 23       	and	r24, r24
 e9e:	21 f0       	breq	.+8      	; 0xea8 <USB_Device_ProcessControlRequest+0x292>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ea0:	84 e0       	ldi	r24, 0x04	; 4
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 ea2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
 ea6:	09 c0       	rjmp	.+18     	; 0xeba <USB_Device_ProcessControlRequest+0x2a4>
 ea8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 eac:	88 23       	and	r24, r24
 eae:	14 f0       	brlt	.+4      	; 0xeb4 <USB_Device_ProcessControlRequest+0x29e>

	EVENT_USB_Device_ConfigurationChanged();
 eb0:	81 e0       	ldi	r24, 0x01	; 1
 eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 eb4:	84 e0       	ldi	r24, 0x04	; 4
 eb6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <USB_DeviceState>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 eba:	00 da       	rcall	.-3072   	; 0x2bc <EVENT_USB_Device_ConfigurationChanged>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ebc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 ec0:	83 ff       	sbrs	r24, 3
 ec2:	16 c0       	rjmp	.+44     	; 0xef0 <USB_Device_ProcessControlRequest+0x2da>
 ec4:	e8 ee       	ldi	r30, 0xE8	; 232
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ec6:	f0 e0       	ldi	r31, 0x00	; 0
 ec8:	80 81       	ld	r24, Z
 eca:	87 7f       	andi	r24, 0xF7	; 247
 ecc:	80 83       	st	Z, r24
 ece:	eb ee       	ldi	r30, 0xEB	; 235
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 ed0:	f0 e0       	ldi	r31, 0x00	; 0
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ed2:	80 81       	ld	r24, Z
 ed4:	80 62       	ori	r24, 0x20	; 32
 ed6:	80 83       	st	Z, r24
 ed8:	0b c0       	rjmp	.+22     	; 0xef0 <USB_Device_ProcessControlRequest+0x2da>
 eda:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ede:	91 30       	cpi	r25, 0x01	; 1
 ee0:	69 f7       	brne	.-38     	; 0xebc <USB_Device_ProcessControlRequest+0x2a6>
 ee2:	ff ce       	rjmp	.-514    	; 0xce2 <USB_Device_ProcessControlRequest+0xcc>
 ee4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <USB_ControlRequest+0x2>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 ee8:	88 23       	and	r24, r24
 eea:	09 f4       	brne	.+2      	; 0xeee <USB_Device_ProcessControlRequest+0x2d8>
 eec:	01 cf       	rjmp	.-510    	; 0xcf0 <USB_Device_ProcessControlRequest+0xda>
 eee:	2c cf       	rjmp	.-424    	; 0xd48 <USB_Device_ProcessControlRequest+0x132>
 ef0:	aa 96       	adiw	r28, 0x2a	; 42
 ef2:	0f b6       	in	r0, 0x3f	; 63
 ef4:	f8 94       	cli
 ef6:	de bf       	out	0x3e, r29	; 62
 ef8:	0f be       	out	0x3f, r0	; 63
 efa:	cd bf       	out	0x3d, r28	; 61
 efc:	df 91       	pop	r29
 efe:	cf 91       	pop	r28
 f00:	1f 91       	pop	r17
 f02:	0f 91       	pop	r16
 f04:	08 95       	ret

00000f06 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 f06:	08 95       	ret

00000f08 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 f08:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 f0a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USB_DeviceState>
 f0e:	88 23       	and	r24, r24
 f10:	99 f0       	breq	.+38     	; 0xf38 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 f12:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 f16:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 f18:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 f1c:	98 2f       	mov	r25, r24
 f1e:	91 70       	andi	r25, 0x01	; 1
 f20:	80 fd       	sbrc	r24, 0
 f22:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 f24:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f26:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 f2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
 f2e:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f30:	72 de       	rcall	.-796    	; 0xc16 <USB_Device_ProcessControlRequest>
 f32:	cf 70       	andi	r28, 0x0F	; 15
 f34:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 f38:	cf 91       	pop	r28
 f3a:	08 95       	ret

00000f3c <_exit>:
 f3c:	f8 94       	cli

00000f3e <__stop_program>:
 f3e:	ff cf       	rjmp	.-2      	; 0xf3e <__stop_program>
